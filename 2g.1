.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "" "" "" "" ""
.SH 2g
.SS Description
A custom git wrapper that extends Git with some custom commands that I
find useful.
.PP
Any commands that are not a custom command is automatically passed to
Git.
Git should have full functionality (including using vim to edit commit
message).
.SS Custom Commands
.IP \[bu] 2
\f[CR]2g explore <repo.git>\f[R] Allows you to explore a Git repo
without polluting your directories.
.IP \[bu] 2
\f[CR]2g install <repo.git>\f[R] Clones a repository in
\f[CR]\[ti]/.local/bin\f[R] and adds the repository to your
\f[CR]PATH\f[R] environment variable.
Note: You will have to reload your shell to use any programs/scripts
that were installed.
.IP \[bu] 2
\f[CR]2g clone\-file <repo.git>/<file_path>\f[R] Similar to the patched
clone command, using \f[CR]clone\-file\f[R] allows you to clone a single
file from a git repository.
Without any Git history attached.
.IP \[bu] 2
\f[CR]2g cache\-clone <repo.git>\f[R] A more optimized version of
\f[CR]git clone\f[R] that will attempt to use a local cache of the
repository and update it instead of cloning an entire repo from scratch.
Additionally, it will fetch git history in the background, meaning that
you will have access to all the repositories code, and (hopefully) by
the time that you push, all the git history will have been fetched.
.SS Patched Commands
.IP \[bu] 2
\f[CR]2g clone <repo.git>/[file_path]\f[R] By adding a file path to a
clone command, you are able to clone a single file from a git
repository.
Warning: This file will not have any Git history attached to it because
it was not cloned as part of a repository.
Example: Clone the CUDA .gitignore file into your repository you would
run
\f[CR]2g clone https://github.com/github/gitignore/blob/main/CUDA.gitignore\f[R]
